/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package meka.classifiers.multilabel.meta.gaautomlc.core.xmlparser;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import meka.classifiers.multilabel.meta.automekaggp.core.MetaIndividualGGP;
import org.epochx.gr.representation.GRCandidateProgram;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author alexgcsa
 */
public class XMLGeneHandlerUtil_remove {

    
    public ArrayList<XMLGeneHandler> performParallelParsing(ArrayList<XMLGeneHandler> xmlGeneHandlerList, int numberOfThreads){
        //List of individuals to be parsed. 
        ArrayList<XMLGeneHandler> evaluatedxmlGeneHandlerList = new ArrayList<XMLGeneHandler>(xmlGeneHandlerList);
        ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);
        //List of callables. **/
        Collection<Callable<String>> list = new LinkedList<Callable<String>>();
  

        //It initializes the lists lists **/
        for (XMLGeneHandler individual : evaluatedxmlGeneHandlerList) {
            //It adds a new individual to be processed, i.e., to be parsed by a thread. **/
            list.add(new ProcessedParsing(individual));
        }
        /** It calls all the individuals -- ie, it parsers all the individuals. **/
        try {
            List<Future<String>> futures = executor.invokeAll(list);

            for (Future<?> fut : futures) {
                try {
                    fut.get();
                } catch (ExecutionException | CancellationException ex) {
                    ex.printStackTrace();
                    System.out.println("matando por: " + ex);
                    fut.cancel(true);
                    list.clear();
                }
            }
        } catch (Exception ex) {
            System.out.println(ex);
        }

        System.gc();
        /** It terminates the execution (executorservice). **/
        executor.shutdownNow();
        executor.shutdown();
        
        return evaluatedxmlGeneHandlerList;
        
    }
    
  
    
  
    
    
    /**
     * A static class to process the parsing of the genes of each individual.
     */
    private static class ProcessedParsing extends Thread implements Callable<String> {
        protected XMLGeneHandler individualGeneParser;

        /**
         * 
         * @param individual individual's parser
         */
        public ProcessedParsing(XMLGeneHandler individualGeneParser) {
            try {
                this.individualGeneParser = individualGeneParser;
            } catch (Exception ex) {
               System.out.println(ex);
            }
        }     

        
        /**
         * The callable method to perform parsing.
         * @return a empty string.
         * @throws Exception 
         */
        @Override
        public String call() throws Exception {
            this.individualGeneParser.parsing();
            return "";
        }  
    }    
    
    
}

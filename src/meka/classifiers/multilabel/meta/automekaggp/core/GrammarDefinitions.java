/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package meka.classifiers.multilabel.meta.automekaggp.core;

/**
 *
 * @author alexgcsa
 */
public class GrammarDefinitions {

//    private String grammar;
    
    public String getGrammarDefinition(int grammarType, int grammarMode){
            if(grammarMode==0){
                return getGrammarDefinition_Minimal(grammarType);
            }else if(grammarMode==1){
                return getGrammarDefinition_Medium(grammarType);
            }else if(grammarMode >=2){
                return getGrammarDefinition_Large(grammarType);    
            }else{
                return getGrammarDefinition_Large(grammarType);
            }
    }
    
    
//========================================================================================================================================================================================================================//    
//========================================================================================================================================================================================================================// ]
//========================================================================================================================================================================================================================// 
    
    public String getGrammarDefinition_Minimal(int grammarType) {
       
        switch (grammarType) {
            case 0:
                return this.defineDefaultGrammar_Minimal();
            case 1:
                return this.defineIntegerGrammar_Minimal();
            case 2:
                return this.defineRealGrammar_Minimal();
            case 3:
                return this.defineCategoricalGrammar_Minimal();
            case 4:
                return this.defineIntegerRealGrammar_Minimal();                
            case 5:
                return this.defineCategoricalIntegerGrammar_Minimal();
            case 6:
                return this.defineCategoricalRealGrammar_Minimal();
            case 7:
                return this.defineFullGrammar_Minimal();
            default:
                return this.defineFullGrammar_Minimal();
        }
    }
    
    
   public String defineDefaultGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }
   
    public String defineIntegerGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
	grammar += "<up> ::= False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }   

    public String defineRealGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";        
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }
    
    

    public String defineIntegerRealGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
   
        return grammar;
    }

    public String defineCategoricalGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";   
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
   
        return grammar;
    }

    public String defineCategoricalIntegerGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
        
        return grammar;
    
    }

    public String defineCategoricalRealGrammar_Minimal() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n"; 
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n"; 
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }

    public String defineFullGrammar_Minimal() {
        String grammar = "";

        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";        
        grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <RandomForest> | <JRip> | <KNN> | <LR> | <NB>" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";        
        
        return grammar;
    }

//========================================================================================================================================================================================================================// 
//========================================================================================================================================================================================================================//     
//========================================================================================================================================================================================================================//     
    
    
    public String getGrammarDefinition_Medium(int grammarType) {
       
        switch (grammarType) {
            case 0:
                return this.defineDefaultGrammar_Medium();
            case 1:
                return this.defineIntegerGrammar_Medium();
            case 2:
                return this.defineRealGrammar_Medium();
            case 3:
                return this.defineCategoricalGrammar_Medium();                
            case 4:
                return this.defineIntegerRealGrammar_Medium();
            case 5:
                return this.defineCategoricalIntegerGrammar_Medium();
            case 6:
                return this.defineCategoricalRealGrammar_Medium();
            case 7:
                return this.defineFullGrammar_Medium();
            default:
                return this.defineFullGrammar_Medium();
        }
    }  
    
    
    public String defineDefaultGrammar_Medium() {
        String grammar = "";

        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";

        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= 0" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 0" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= 2" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering" + "\n";
        grammar += "<k_homer> ::= 3" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }    
    
    
    public String defineIntegerGrammar_Medium() {
        String grammar = "";

        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
        
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(0,20) " + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4 " + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";        
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100) " + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering" + "\n";
        grammar += "<k_homer> ::= RANDINT_TYPE6(2,L-1)" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }

    public String defineRealGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
        
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5) " + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";        
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= 0" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 0" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= 2" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering" + "\n";
        grammar += "<k_homer> ::= 3" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }    
    
    
    public String defineIntegerRealGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
        
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(0,20)" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4 " + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5) " + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";            
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10 | 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100) " + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering" + "\n";
        grammar += "<k_homer> ::= RANDINT_TYPE6(2,L-1)" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
   
        return grammar;
    }   
    
    
    public String defineCategoricalGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
                
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md-rep>" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= 3" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= 1.0" + "\n";
        grammar += "<sig> ::= 1.0" + "\n";
        grammar += "<g> ::= 0.01" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";         
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= True | False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG | PROD | MAJ | MIN | MAX" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 10" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= 2" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering | Clustering | Random" + "\n";
        grammar += "<k_homer> ::= 3" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <<ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
   
        return grammar;
    }    
    
    
    public String defineCategoricalIntegerGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
        
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= 1.0" + "\n";
        grammar += "<sig> ::= 1.0" + "\n";
        grammar += "<g> ::= 0.01" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";         
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100)" + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= True | False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG | PROD | MAJ | MIN | MAX" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering | Clustering | Random" + "\n";
        grammar += "<k_homer> ::= RANDINT_TYPE6(2,L-1)" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <<ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
        
        return grammar;
    
    }

    public String defineCategoricalRealGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
                
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md-rep>" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= 3" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5)" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<sig> ::= RANDFLOAT(0.1,10.0)" + "\n";
        grammar += "<g> ::= RANDFLOAT(0.0001,1.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= True | False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG | PROD | MAJ | MIN | MAX" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 10" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::=  RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>" + "\n";
        grammar += "<rbm> ::= 2" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering | Clustering | Random" + "\n";
        grammar += "<k_homer> ::= 3" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <<ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }   
    
    public String defineFullGrammar_Medium() {
        String grammar = "";
        grammar += "<MLC-ALGORITHMS> ::= <DEFINE-THRESHOLD-LEVEL> BR <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> CC <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> LP <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BRq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <CCq> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> FW <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> RT <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> PCC <ALGS-SLC> |  <DEFINE-THRESHOLD-LEVEL> <MCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PS> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <PSt> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkEL> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <RAkELd> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <BCC> <ALGS-SLC> | <DEFINE-THRESHOLD-LEVEL> <ML-BPNN>" + "\n";       
	grammar += "<ALGS-SLC> ::= <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | <RandomForest> | <REPTree> | <DT> | <JRip> | <PART> | <KNN> | <KStar> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | <LogisticModelTrees>" + "\n";
                        
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";        
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5)" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<sig> ::= RANDFLOAT(0.1,10.0)" + "\n";
        grammar += "<g> ::= RANDFLOAT(0.0001,1.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";         
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100)" + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= True | False" + "\n";
        grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<Vote> ::= Vote <cr>" + "\n";
        grammar += "<cr> ::= AVG | PROD | MAJ | MIN | MAX" + "\n";
        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>		" + "\n";
        grammar += "<rbm> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<HOMER> ::= HOMER <t> <k_homer>" + "\n";
        grammar += "<t> ::= BalancedClustering | Clustering | Random" + "\n";
        grammar += "<k_homer> ::= RANDINT_TYPE6(2,L-1)" + "\n";
        grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>" + "\n";
        grammar += "<MBR> ::= MBR BR <<ALGS-SLC>" + "\n";
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }  
    
    
    
    
    
    
    
//========================================================================================================================================================================================================================//    
//========================================================================================================================================================================================================================// ]
//========================================================================================================================================================================================================================// 
    
    public String getGrammarDefinition_Large(int grammarType) {
       
        switch (grammarType) {
            case 0:
                return this.defineDefaultGrammar_Large();
            case 1:
                return this.defineIntegerGrammar_Large();
            case 2:
                return this.defineRealGrammar_Large();
            case 3:
                return this.defineCategoricalGrammar_Large();
            case 4:                
                return this.defineIntegerRealGrammar_Large();
            case 5:
                return this.defineCategoricalIntegerGrammar_Large();
            case 6:
                return this.defineCategoricalRealGrammar_Large();
            case 7:
                return this.defineFullGrammar_Large();
            default:
                return this.defineFullGrammar_Large();
        }
    }   
    
    
    
    
    public String defineDefaultGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
     
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= 0" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 0" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
                
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= 67" + "\n";
        grammar += "<i_metamlc> ::= 10" + "\n";
        grammar += "<ap> ::= 50" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= 67" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }

    public String defineIntegerGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
     
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0 | 2 | 3 | 4 | 5" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(0,20) " + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4 " + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100) " + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";

        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<i_metamlc> ::= RANDINT_TYPE0(10,50)" + "\n";
        grammar += "<ap> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= RANDINT_TYPE0(52,72)" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
             
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1" + "\n";
        
        return grammar;
    }

    public String defineRealGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
         
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5) " + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= 0" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 0" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= 67" + "\n";
        grammar += "<i_metamlc> ::= 10" + "\n";
        grammar += "<ap> ::= 50" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= 67" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
         
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }

    public String defineIntegerRealGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
     
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr>" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True" + "\n";
        grammar += "<bs> ::= False" + "\n";
        grammar += "<umc> ::= True" + "\n";
        grammar += "<ul> ::= False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= False" + "\n";
        grammar += "<sor> ::= False" + "\n";
        grammar += "<fr> ::= True" + "\n";
        grammar += "<eop> ::= False" + "\n";
        grammar += "<wtb_activate> ::= False" + "\n";
        grammar += "<uaic> ::= False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0 | 2 | 3 | 4 | 5" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= False" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(0,20)" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>" + "\n";
        grammar += "<em> ::= acc" + "\n";
        grammar += "<uibk> ::= False" + "\n";
        grammar += "<sm> ::= BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4 " + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>" + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= False" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= False" + "\n";
        grammar += "<dw> ::= None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= False" + "\n";
        grammar += "<mm> ::= a" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a" + "\n";
        grammar += "<n2b> ::= True" + "\n";
        grammar += "<reset> ::= True" + "\n";
        grammar += "<decay> ::= False" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= False" + "\n";
        grammar += "<nrmv> ::= False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5) " + "\n";
        grammar += "<ft> ::= 0" + "\n";
        grammar += "<bcm> ::= False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo>" + "\n";
        grammar += "<poly_kern> ::= PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10 | 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= False" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100) " + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_MCC> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Exact-match" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= Ibf" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= Ibf" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= None" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5) " + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) " + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<i_metamlc> ::= RANDINT_TYPE0(10,50)" + "\n";
        grammar += "<ap> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= RANDINT_TYPE0(52,72)" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                     
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
   
        return grammar;
    }

    public String defineCategoricalGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
                     
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md-rep>" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= 3" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::=  1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::=  0.0001" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= 1.0" + "\n";
        grammar += "<sig> ::= 1.0" + "\n";
        grammar += "<g> ::= 0.01" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= True | False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 10" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= 67" + "\n";
        grammar += "<i_metamlc> ::= 10" + "\n";
        grammar += "<ap> ::= 50" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= 67" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                     
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
   
        return grammar;
    }

    public String defineCategoricalIntegerGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
             
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= 0.25" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0 | 2 | 3 | 4 | 5" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= 0.001" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= 2.0" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= 1.0" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= 0.3" + "\n";
        grammar += "<m> ::= 0.2" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= 0.00000001" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= 0.01" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= 0.0001" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= 1.0" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= 1.0" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= 1.0" + "\n";
        grammar += "<sig> ::= 1.0" + "\n";
        grammar += "<g> ::= 0.01" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= 0.0" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= 0.5" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100)" + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= True | False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= 0.75" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= 0.03" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= 0.1" + "\n";
        grammar += "<m_bpnn> ::= 0.1" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<i_metamlc> ::= RANDINT_TYPE0(10,50)" + "\n";
        grammar += "<ap> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= RANDINT_TYPE0(52,72)" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                     
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | 0.5" + "\n";
        
        return grammar;
    
    }

    public String defineCategoricalRealGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
             
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= 2" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md-rep>" + "\n";
        grammar += "<md-rep> ::= -1" + "\n";
        grammar += "<nt> ::= 100" + "\n";
        grammar += "<nf> ::= 0" + "\n";
        grammar += "<md> ::= 0" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= 1" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md>" + "\n";
        grammar += "<mw-rep> ::= 2" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= 2" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= 6" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= 3" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= 1" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= 20" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= 1" + "\n";
        grammar += "<mk> ::= 10000" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5)" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<sig> ::= RANDFLOAT(0.1,10.0)" + "\n";
        grammar += "<g> ::= RANDFLOAT(0.0001,1.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= 15" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= 10" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= 100" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= 100" + "\n";
        grammar += "<ni_ada_and_bagging> ::= 10" + "\n";
        grammar += "<ur> ::= True | False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= 10" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= 10" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= 1" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= 1000" + "\n";
        grammar += "<ci> ::= 100" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= 0" + "\n";
        grammar += "<pv> ::= 0" + "\n";
        grammar += "<les> ::= 3" + "\n";
        grammar += "<sre> ::= 10" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= 50" + "\n";
        grammar += "<ps> ::= 10" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= 100" + "\n";
        grammar += "<nhu_bpnn> ::= 10" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= 67" + "\n";
        grammar += "<i_metamlc> ::= 10" + "\n";
        grammar += "<ap> ::= 50" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= 67" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                     
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }

    public String defineFullGrammar_Large() {
        String grammar = "";
        grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>" + "\n";
        grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | SM <META-MLC1-FULL> | <RSML> <META-MLC1-FULL> | <BaggingMLC> <META-MLC2-FULL> | <BaggingMLCDUP> <META-MLC2-FULL> | <EnsembleMLC> <META-MLC2-FULL> | <EM> <META-MLC3-FULL> | <CM> <META-MLC3-FULL>" + "\n";
        grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>" + "\n";
        grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>" + "\n";
        grammar += "<ASC> ::= ASC <sm>" + "\n";
        grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | <BayesNet> | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>" + "\n";
     
        grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>" + "\n";
        grammar += "<J48-Complement> ::= <cf> <sr> | True" + "\n";
        grammar += "<cf> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<sr> ::= True | False" + "\n";
        grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>" + "\n";
        grammar += "<mno> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<ct> ::= True | False" + "\n";
        grammar += "<bs> ::= True | False" + "\n";
        grammar += "<umc> ::= True | False" + "\n";
        grammar += "<ul> ::= True | False" + "\n";
        grammar += "<RandomForest> ::= RandomForest <nt> <nf> <md>" + "\n";
        grammar += "<nt> ::= RANDINT_TYPE0(2,256)" + "\n";
        grammar += "<nf> ::= RANDINT_TYPE0(2,32)" + "\n";
        grammar += "<md> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf> <md>" + "\n";
        grammar += "<mw> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>" + "\n";
        grammar += "<growing_the_tree_and_backfitting> ::= 0 | 2 | 3 | 4 | 5" + "\n";
        grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up> <md-rep>" + "\n";
        grammar += "<md-rep> ::= RANDINT_TYPE0(2,20)" + "\n";
        grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<var> ::= RANDFLOAT(0.00001,0.1)" + "\n";
        grammar += "<up> ::= True | False" + "\n";
        grammar += "<DT> ::= DT <em> <uibk> <sm> <crv> " + "\n";
        grammar += "<em> ::= acc | rmse | mae | auc" + "\n";
        grammar += "<uibk> ::= True | False" + "\n";
        grammar += "<sm> ::= GreedyStepwise | BestFirst" + "\n";
        grammar += "<crv> ::= 1 | 2 | 3 | 4" + "\n";
        grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o> " + "\n";
        grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)" + "\n";
        grammar += "<cer> ::= True | False" + "\n";
        grammar += "<o> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<OneR> ::= OneR <mbs>" + "\n";
        grammar += "<mbs> ::= RANDINT_TYPE0(1,32)" + "\n";
        grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>" + "\n";
        grammar += "<PART-BASICS> ::= <mno> <bs>" + "\n";
        grammar += "<PART-CONSTRAINTS> ::= True <nr> | False" + "\n";
        grammar += "<nr> ::= RANDINT_TYPE0(2,5)" + "\n";
        grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>" + "\n";
        grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<loo> ::= True | False" + "\n";
        grammar += "<dw> ::= F | I | None" + "\n";
        grammar += "<KStar> ::= KStar <gb> <eab> <mm>" + "\n";
        grammar += "<gb> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<eab> ::= True | False" + "\n";
        grammar += "<mm> ::= a | d | m | n" + "\n";
        grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>" + "\n";
        grammar += "<i> ::= RANDINT_TYPE0(1,10)" + "\n";
        grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)" + "\n";
        grammar += "<e> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>" + "\n";
        grammar += "<lr> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<m> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<nhn> ::= a | i | o | t" + "\n";
        grammar += "<n2b> ::= True | False" + "\n";
        grammar += "<reset> ::= True | False" + "\n";
        grammar += "<decay> ::= True | False" + "\n";
        grammar += "<LR> ::= LogisticRegression <r-lr>" + "\n";
        grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";        
        grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>" + "\n";
        grammar += "<lf> ::= 0 | 1 | 2" + "\n";
        grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)" + "\n";
        grammar += "<nn> ::= True | False" + "\n";
        grammar += "<nrmv> ::= True | False" + "\n";
        grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)" + "\n";
        grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>" + "\n";
        grammar += "<c> ::= RANDFLOAT(0.5,1.5)" + "\n";
        grammar += "<ft> ::= 0 | 1 | 2" + "\n";
        grammar += "<bcm> ::= True | False" + "\n";
        grammar += "<kernel> ::= <poly_kern> <exp> <ulo> | Puk <om> <sig> | RBFKernel <g>" + "\n";
        grammar += "<poly_kern> ::= NormalizedPolyKernel | PolyKernel" + "\n";
        grammar += "<exp> ::= RANDFLOAT(0.2,5.0)" + "\n";
        grammar += "<ulo> ::= True | False" + "\n";
        grammar += "<om> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<sig> ::= RANDFLOAT(0.1,10.0)" + "\n";
        grammar += "<g> ::= RANDFLOAT(0.0001,1.0)" + "\n";
        grammar += "<NB> ::= NaiveBayes <NB-Parameters>" + "\n";
        grammar += "<NB-Parameters> ::= uke | usd | None" + "\n";
        grammar += "<BayesNet> ::= TAN | K2 | HillClimber | SimulatedAnnealing | TabuSearch" + "\n";          
        grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>" + "\n";
        grammar += "<ucv> ::= True | False" + "\n";
        grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>" + "\n";
        grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)" + "\n";
        grammar += "<cn> ::= True | False" + "\n";
        grammar += "<sor> ::= True | False" + "\n";
        grammar += "<fr> ::= True | False" + "\n";
        grammar += "<eop> ::= True | False" + "\n";
        grammar += "<wtb_activate> ::= True <wtb> | False" + "\n";
        grammar += "<uaic> ::= True | False" + "\n";
        grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)" + "\n";
        grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE>" + "\n";
        grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | <BayesNet> | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>" + "\n";
        grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>" + "\n";
        grammar += "<k_lwl_activate> ::= True <k_lwl> | False" + "\n";
        grammar += "<k_lwl> ::= -1 | 10| 30 | 60 | 90 | 120" + "\n";
        grammar += "<wk_activate> ::= True <wk> | False" + "\n";
        grammar += "<wk> ::= 0 | 1 | 2 | 3 | 4" + "\n";
        grammar += "<sss> ::= RANDFLOAT(0.1,1.0)" + "\n";
        grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)" + "\n";
        grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>" + "\n";
        grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>" + "\n";
        grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg> | True 100" + "\n";
        grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<AdaM1> ::= AdaM1 <wt> <ur>" + "\n";
        grammar += "<wt> ::= RANDINT_TYPE0(50,100)" + "\n";
        grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)" + "\n";
        grammar += "<ur> ::= True | False" + "\n";

        grammar += "<BRq> ::= BRq <dsr>" + "\n";
        grammar += "<CCq> ::= CCq <dsr>" + "\n";
        grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)" + "\n";
        grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>" + "\n";
        grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>" + "\n";
        grammar += "<chi_MCC> ::= <chi_CT>" + "\n";
        grammar += "<ii> ::= RANDINT_TYPE0(2,100)" + "\n";
        grammar += "<eval_metrics> ::= Accuracy | Jaccard-index | Hamming-score | Exact-match | Jaccard-distance | Hamming-loss | ZeroOne-loss | Harmonic-score | One-error | Rank-loss | Avg-precision | Log-Loss-lim:L | Log-Loss-lim:D | Micro-Precision | Micro-Recall | Macro-Precision | Macro-Recall | F1-micro-averaged | F1-macro-averaged-by-example | F1-macro-averaged-by-label | AUPRC-macro-averaged | AUROC-macro-averaged | Levenshtein-distance" + "\n";
        grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>" + "\n";
        grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)" + "\n";
        grammar += "<dp> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<w> ::= 0 1 | -1 <d>" + "\n";
        grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)" + "\n";
        grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>" + "\n";
        grammar += "<dp-cdt> ::= C | I | Ib | Ibf | H | Hbf | X | F | None" + "\n";
        grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)" + "\n";
        grammar += "<ci> ::= RANDINT_TYPE0(1,100)" + "\n";
        grammar += "<PS> ::= PS <sv> <pv>" + "\n";
        grammar += "<PSt> ::= PSt <sv> <pv>" + "\n";
        grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>" + "\n";
        grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>" + "\n";
        grammar += "<sv> ::= RANDINT_TYPE0(0,5)" + "\n";
        grammar += "<pv> ::= RANDINT_TYPE0(1,5)" + "\n";
        grammar += "<les> ::= RANDINT_TYPE2(1,L/2)" + "\n";
        grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))" + "\n";
        grammar += "<BCC> ::= BCC <dp_complete>" + "\n";
        grammar += "<dp_complete> ::= L | <dp>" + "\n";
        grammar += "<B> ::= RANDFLOAT(0.01,0.99)" + "\n";
        grammar += "<ts> ::= 0 | 1" + "\n";
        grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)" + "\n";
        grammar += "<ps> ::= RANDINT_TYPE0(1,50)" + "\n";
        grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>" + "\n";
        grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>" + "\n";
        grammar += "<ne> ::= RANDINT_TYPE0(10,1000)" + "\n";
        grammar += "<nhu_bpnn> ::= RANDINT_TYPE4((0.2,1.0)*n_attributes)" + "\n";
        grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1)" + "\n";
        grammar += "<m_bpnn> ::= RANDFLOAT(0.2,0.8)" + "\n";
        
        grammar += "<RSML> ::= RSML <bsp> <i_metamlc> <ap>" + "\n";
        grammar += "<bsp> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<i_metamlc> ::= RANDINT_TYPE0(10,50)" + "\n";
        grammar += "<ap> ::= RANDINT_TYPE0(10,100)" + "\n";
        grammar += "<META-MLC1-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<BaggingMLC> ::= BaggingML <i_metamlc>" + "\n";
        grammar += "<BaggingMLCDUP> ::= BaggingMLDup <bsp> <i_metamlc>" + "\n";
        grammar += "<EnsembleMLC> ::= EnsembleML <bsp_ensembleML> <i_metamlc>" + "\n";
        grammar += "<bsp_ensembleML> ::= RANDINT_TYPE0(52,72)" + "\n";
        grammar += "<META-MLC2-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
        grammar += "<EM> ::= EM <i_metamlc>" + "\n";
        grammar += "<CM> ::= CM <i_metamlc>" + "\n";
        grammar += "<META-MLC3-FULL> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC> | <MCC> <ALGS-SLC> | <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <ML-BPNN>" + "\n";
                     
        grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>" + "\n";
        grammar += "<predtshd> ::= PCut1 | PCutL | RANDFLOAT(0.00000000000000000001,1.00)" + "\n";
        
        return grammar;
    }

}

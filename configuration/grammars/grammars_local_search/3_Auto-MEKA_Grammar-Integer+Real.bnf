grammar += "<START> ::= <DEFINE-THRESHOLD-LEVEL> <MLC-ALGORITHMS>"+"\n";
grammar += "<MLC-ALGORITHMS> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC> | <BRq> <ALGS-SLC> | <CCq> <ALGS-SLC> | FW <ALGS-SLC> | RT <ALGS-SLC> | PCC <ALGS-SLC> | <CT> <ALGS-SLC>| <MCC> <ALGS-SLC>| <CDT> <ALGS-SLC> | <CDN> <ALGS-SLC> | <PS> <ALGS-SLC> | <PSt> <ALGS-SLC> | <RAkEL> <ALGS-SLC> | <RAkELd> <ALGS-SLC> | <BCC> <ALGS-SLC> | <PMCC> <ALGS-SLC> | <ML-BPNN> | <ML-DBPNN> <ML-BPNN> | <HOMER> <META-MLC> | <MBR>"+"\n";
grammar += "<ALGS-SLC> ::= <ALGS-SLC-WITH-FS> | <ALG-TYPE-WITHOUT-FS> | <META-SLC>"+"\n";
grammar += "<ALGS-SLC-WITH-FS> ::= <ASC> <ALG-TYPE-WITHOUT-FS>"+"\n";
grammar += "<ASC> ::= ASC <sm>"+"\n";
grammar += "<ALG-TYPE-WITHOUT-FS> ::= <J48> | DecisionStump |  <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <OneR> | <PART> | ZeroR | <KNN> | <KStar> | <VotedPerceptron> | <MultiLayerPerc> | <SeqMinOptimization> | <StocGradDescent> | <LR> | <NB> | TAN | K2 | HillClimber | LAGDHillClimber | SimulatedAnnealing | TabuSearch | NaiveBayesMultinomial | <LogisticModelTrees> | <SimpleLogistic>"+"\n";
grammar += "<J48> ::= J48 <J48-Complement> <J48-Basics>"+"\n";
grammar += "<J48-Complement> ::= <cf> <sr>"+"\n";
grammar += "<cf> ::= RANDFLOAT(0.0,1.0)"+"\n";
grammar += "<sr> ::= True"+"\n";
grammar += "<J48-Basics> ::= <mno> <ct> <bs> <umc> <ul>"+"\n";
grammar += "<mno> ::= RANDINT_TYPE0(1,64)"+"\n";
grammar += "<ct> ::= True"+"\n";
grammar += "<bs> ::= False"+"\n";
grammar += "<umc> ::= True"+"\n";
grammar += "<ul> ::= False"+"\n";
grammar += "<LogisticModelTrees> ::= LogisticModelTrees <mno-lmt> <cn> <sor> <fr> <eop> <uaic> <wtb_activate>"+"\n";
grammar += "<mno-lmt> ::= RANDINT_TYPE0(1,64)"+"\n";
grammar += "<cn> ::= False"+"\n";
grammar += "<sor> ::= False"+"\n";
grammar += "<fr> ::= True"+"\n";
grammar += "<eop> ::= False"+"\n";
grammar += "<wtb_activate> ::= False"+"\n";
grammar += "<uaic> ::= False"+"\n";
grammar += "<wtb> ::= RANDFLOAT(0.0,1.0)"+"\n";
grammar += "<RandomForest> ::= RandomForest <nt> <nf>  <md>"+"\n";
grammar += "<nt> ::= RANDINT_TYPE0(2,256)"+"\n";
grammar += "<nf> ::= RANDINT_TYPE0(2,32)"+"\n";
grammar += "<md> ::= RANDINT_TYPE0(2,20)"+"\n";
grammar += "<RandomTree> ::= RandomTree <mw> <nfbgt> <nf>  <md>"+"\n";
grammar += "<mw> ::= RANDINT_TYPE0(1,64)"+"\n";
grammar += "<nfbgt> ::= <growing_the_tree_and_backfitting>"+"\n";
grammar += "<growing_the_tree_and_backfitting> ::= RANDINT_TYPE0(0,5)"+"\n";
grammar += "<REPTree> ::= REPTree <var> <mw-rep> <up>  <md-rep>"+"\n";
grammar += "<mw-rep> ::= RANDINT_TYPE0(1,64)"+"\n";
grammar += "<var> ::= RANDFLOAT(0.00001,0.1)"+"\n";
grammar += "<up> ::= False"+"\n";
grammar += "<md-rep> ::= RANDINT_TYPE0(0,20)"+"\n";
grammar += "<DT> ::= DT <em> <uibk> <sm> <crv>"+"\n";
grammar += "<em> ::= acc"+"\n";
grammar += "<uibk> ::= False"+"\n";
grammar += "<sm> ::= BestFirst"+"\n";
grammar += "<crv> ::= 1 | 2 | 3 | 4 "+"\n";
grammar += "<JRip> ::= JRip <mtw> <cer> <up> <o>"+"\n";
grammar += "<mtw> ::= RANDFLOAT(1.0,5.0)"+"\n";
grammar += "<cer> ::= True"+"\n";
grammar += "<o> ::= RANDINT_TYPE0(1,5) "+"\n";
grammar += "<OneR> ::= OneR <mbs>"+"\n";
grammar += "<mbs> ::= RANDINT_TYPE0(1,32)"+"\n";
grammar += "<PART> ::= PART <PART-BASICS> <PART-CONSTRAINTS>"+"\n";
grammar += "<PART-BASICS> ::= <mno> <bs>"+"\n";
grammar += "<PART-CONSTRAINTS> ::= False"+"\n";
grammar += "<KNN> ::= KNN <k_nn> <loo> <dw>"+"\n";
grammar += "<k_nn> ::= RANDINT_TYPE0(1,64)"+"\n";
grammar += "<loo> ::= False"+"\n";
grammar += "<dw> ::= None"+"\n";
grammar += "<KStar> ::= KStar <gb> <eab> <mm>"+"\n";
grammar += "<gb> ::= RANDINT_TYPE0(1,100)"+"\n";
grammar += "<eab> ::= False"+"\n";
grammar += "<mm> ::= a"+"\n";
grammar += "<VotedPerceptron> ::= VotedPerceptron <i> <mk> <e>"+"\n";
grammar += "<i> ::= RANDINT_TYPE0(1,10)"+"\n";
grammar += "<mk> ::= RANDINT_TYPE0(5000,50000)"+"\n";
grammar += "<e> ::= RANDFLOAT(0.2,5.0)"+"\n";
grammar += "<MultiLayerPerc> ::= MultiLayerPerc <lr> <m> <nhn> <n2b> <reset> <decay>"+"\n";
grammar += "<lr> ::= RANDFLOAT(0.1,1.0)"+"\n";
grammar += "<m> ::= RANDFLOAT(0.0,1.0)"+"\n";
grammar += "<nhn> ::= a"+"\n";
grammar += "<n2b> ::= True"+"\n";
grammar += "<reset> ::= True"+"\n";
grammar += "<decay> ::= False"+"\n";
grammar += "<StocGradDescent> ::= StocGradDescent <lf> <lr_sgd> <nn> <nrmv> <r>"+"\n";
grammar += "<lf> ::= 0"+"\n";
grammar += "<lr_sgd> ::= RANDFLOAT(0.00001,1.0)"+"\n";
grammar += "<nn> ::= False"+"\n";
grammar += "<nrmv> ::= False"+"\n";
grammar += "<r> ::= RANDFLOAT(0.000000000001,10.0)"+"\n";
grammar += "<LR> ::= LogisticRegression <r-lr>"+"\n";
grammar += "<r-lr> ::= RANDFLOAT(0.000000000001,10.0)"+"\n";
grammar += "<SimpleLogistic> ::= SimpleLogistic <ucv> <uaic> <wtb_activate>"+"\n";
grammar += "<ucv> ::= True"+"\n";
grammar += "<SeqMinOptimization> ::= SeqMinOptimization <c> <ft> <bcm> <kernel>"+"\n";
grammar += "<c> ::=  RANDFLOAT(0.5,1.5) "+"\n";
grammar += "<ft> ::= 0"+"\n";
grammar += "<bcm> ::= False"+"\n";
grammar += "<kernel> ::= <poly_kern> <exp> <ulo>"+"\n";
grammar += "<poly_kern> ::= PolyKernel"+"\n";
grammar += "<exp> ::= RANDFLOAT(0.2,5.0)"+"\n";
grammar += "<ulo> ::= True"+"\n";
grammar += "<NB> ::= NaiveBayes <NB-Parameters>"+"\n";
grammar += "<NB-Parameters> ::= None"+"\n";
grammar += "<META-SLC> ::= <LWL> <ALG-WEIGHTED-TYPE> | RandomSubspace <sss> <ni_random_methods> <ALG-TYPE-WITHOUT-FS> | RandomCommittee <ni_random_methods> <ALG-TYPE_RC> | <Bagging> <ni_ada_and_bagging> <ALG-TYPE-WITHOUT-FS> | <AdaM1> <ni_ada_and_bagging> <ALG-WEIGHTED-TYPE> | <STACKING> | <VOTING>"+"\n";
grammar += "<ALG-WEIGHTED-TYPE> ::= <J48> | DecisionStump | <RandomForest> | <RandomTree> | <REPTree> | <DT> | <JRip> | <PART> | ZeroR | <KNN> | <NB> | TAN | K2 | HillClimber | LAGDHillClimber | SimulatedAnnealing | TabuSearch | NaiveBayesMultinomial | <MultiLayerPerc> |  <SeqMinOptimization> | <SimpleLogistic>"+"\n";
grammar += "<LWL> ::= LWL <k_lwl_activate> <wk_activate>"+"\n";
grammar += "<k_lwl_activate> ::= False"+"\n";
grammar += "<k_lwl> ::= -1 | 10 | 30 | 60 | 90 | 120"+"\n";
grammar += "<wk_activate> ::= False"+"\n";
grammar += "<sss> ::= RANDFLOAT(0.1,1.0)"+"\n";
grammar += "<ni_random_methods> ::= RANDINT_TYPE0(2,64)"+"\n";
grammar += "<ALG-TYPE_RC> ::= <RandomForest> | <RandomTree> | <REPTree> | <StocGradDescent> | <MultiLayerPerc>"+"\n";
grammar += "<Bagging> ::= BaggingSLC <BaggingSLC_BASICS>"+"\n";
grammar += "<BaggingSLC_BASICS> ::= False <bsp-bagg>"+"\n";
grammar += "<bsp-bagg> ::= RANDINT_TYPE0(10,100)"+"\n";
grammar += "<AdaM1> ::= AdaM1 <wt> <ur>"+"\n";
grammar += "<wt> ::= RANDINT_TYPE0(50,100) "+"\n";
grammar += "<ni_ada_and_bagging> ::= RANDINT_TYPE0(2,128)"+"\n";
grammar += "<ur> ::= False"+"\n";
grammar += "<STACKING> ::= Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | Stacking <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>"+"\n";
grammar += "<VOTING> ::= <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> | <Vote> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS> <ALG-TYPE-WITHOUT-FS>"+"\n";
grammar += "<Vote> ::= Vote <cr>"+"\n";
grammar += "<cr> ::= AVG"+"\n";
grammar += "<BRq> ::= BRq <dsr>"+"\n";
grammar += "<CCq> ::= CCq <dsr>"+"\n";
grammar += "<dsr> ::= RANDFLOAT(0.2,0.8)"+"\n";
grammar += "<MCC> ::= MCC <chi_MCC> <ii> <eval_metrics>"+"\n";
grammar += "<chi_MCC>::= RANDINT_TYPE0(2,1500)"+"\n";
grammar += "<ii> ::= RANDINT_TYPE0(2,100)"+"\n";
grammar += "<eval_metrics> ::= Exact-match"+"\n";
grammar += "<BCC> ::= BCC <dp_complete>"+"\n";
grammar += "<dp_complete> ::= Ibf"+"\n";
grammar += "<PMCC> ::= PMCC <B> <ts> <ii> <chi_PMCC> <ps> <eval_metrics>"+"\n";
grammar += "<B> ::= RANDFLOAT(0.01,0.99)"+"\n";
grammar += "<ts> ::= 0"+"\n";
grammar += "<chi_PMCC> ::= RANDINT_TYPE0(51,1500)"+"\n";
grammar += "<ps> ::= RANDINT_TYPE0(1,50)"+"\n";
grammar += "<CT> ::= CT <chi_CT> <w> <dp> <ii> <eval_metrics>"+"\n";
grammar += "<chi_CT> ::= RANDINT_TYPE0(2,1500)"+"\n";
grammar += "<dp> ::= Ibf"+"\n";
grammar += "<w> ::= 0 1 | -1 <d>"+"\n";
grammar += "<d> ::= RANDINT_TYPE1(1,SQRT(L)+1)"+"\n";
grammar += "<CDN> ::= CDN <i_cdn_cdt> <ci>"+"\n";
grammar += "<i_cdn_cdt> ::= RANDINT_TYPE0(101,1000)"+"\n";
grammar += "<ci> ::= RANDINT_TYPE0(1,100)"+"\n";
grammar += "<CDT> ::= CDT <w> <dp-cdt> <i_cdn_cdt> <ci>"+"\n";
grammar += "<dp-cdt> ::= None"+"\n";
grammar += "<PS> ::= PS <sv> <pv>"+"\n";
grammar += "<PSt> ::= PSt <sv> <pv>"+"\n";
grammar += "<sv> ::= RANDINT_TYPE0(0,5)"+"\n";
grammar += "<pv> ::= RANDINT_TYPE0(1,5) "+"\n";
grammar += "<RAkELd> ::= RAkELd <les> <sv> <pv>"+"\n";
grammar += "<RAkEL> ::= RAkEL <sre> <les> <sv> <pv>"+"\n";
grammar += "<les> ::= RANDINT_TYPE2(1,L/2)"+"\n";
grammar += "<sre> ::= RANDINT_TYPE3(2,min(2L;100))"+"\n";
grammar += "<ML-BPNN> ::= ML-BPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn>"+"\n";
grammar += "<ne> ::= RANDINT_TYPE0(10,1000)"+"\n";
grammar += "<nhu_bpnn> ::=  RANDINT_TYPE4((0.2,1.0)*n_attributes)"+"\n";
grammar += "<lr_bpnn> ::= RANDFLOAT(0.001,0.1) "+"\n";
grammar += "<m_bpnn> ::=  RANDFLOAT(0.2,0.8)"+"\n";
grammar += "<ML-DBPNN> ::= ML-DBPNN <ne> <nhu_bpnn> <lr_bpnn> <m_bpnn> <rbm>		"+"\n";
grammar += "<rbm> ::= RANDINT_TYPE0(2,5)"+"\n";
grammar += "<HOMER> ::= HOMER <t> <k_homer>"+"\n";
grammar += "<t> ::= BalancedClustering"+"\n";
grammar += "<k_homer> ::= RANDINT_TYPE6(2,L-1)"+"\n";
grammar += "<META-MLC> ::= BR <ALGS-SLC> | CC <ALGS-SLC> | LP <ALGS-SLC>"+"\n";
grammar += "<MBR> ::= MBR BR <ALGS-SLC>"+"\n";
grammar += "<DEFINE-THRESHOLD-LEVEL> ::= threshold <predtshd>"+"\n";
grammar += "<predtshd> ::= RANDFLOAT(0.00000000000000000001,1.00)"+"\n";
